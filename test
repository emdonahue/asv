#!/bin/zsh

assert() {
       if [[ "$2" != "$3" ]]; then
       	   echo "Failure: $1\n\tExpected: $3\n\tReceived: $2"
	   ERR=1
       fi
}

local ASV=$(realpath './asv')
local FS=$'\034'
local GS=$'\035'
local RS=$'\0'
local FS=$'\037'

TMP=$(mktemp)
trap "rm $TMP" EXIT
TMPDIR=$(mktemp -d)
trap "rmdir $TMPDIR" EXIT
cd "$TMPDIR"

THEAD="a${FS}b${RS}"
THEAD2="x${FS}y${RS}"
TROW1="c${FS}d${RS}"
TROW2="e${FS}f${RS}"
TBODY="$TROW1$TROW2"
TABLE="$THEAD$TBODY"

assert 'awk' "$($ASV awk < <(echo -n $TABLE) "1")" "$(echo -n $TABLE)"

assert 'check' "$($ASV check <(echo -n ${THEAD}c${RS}1${FS}f$RS) 2>&1)" "$(echo "Row 1 - Fields: 1, Expected: 2\nRow 2 Column 1 (a) - Type: strnum, Expected: string")"
assert 'check no type' "$($ASV check -t <(echo -n ${THEAD}c${RS}1${FS}f$RS) 2>&1)" "$(echo "Row 1 - Fields: 1, Expected: 2")"

assert 'size' "$($ASV size < <(echo -n $TABLE))" "2"

assert 'count' "$($ASV count < <(echo -n $THEAD$TROW1$TROW1$TROW2))" "$(echo -n "count${FS}a${FS}b${RS}2${FS}c${FS}d${RS}1${FS}e${FS}f${RS}")"
assert 'count field name' "$($ASV count -ftest < <(echo -n $THEAD$TROW1$TROW1$TROW2))" "$(echo -n "test${FS}a${FS}b${RS}2${FS}c${FS}d${RS}1${FS}e${FS}f${RS}")"

assert 'cut' "$($ASV cut -f1 < <(echo -n $TABLE))" "$(echo -n "a${RS}c${RS}e${RS}")"

assert 'group' "$($ASV group 1,2 <(echo -n $THEAD$TROW2$TROW1))" "$(echo -n "a${GS}b${RS}c${GS}d${RS}e${GS}f$RS")"

assert 'head' "$($ASV head 1 <(echo -n $TABLE))" "$(echo -n "$THEAD$TROW1")"

assert 'header' "$($ASV header < <(echo -n $TABLE) x y)" "$(echo -n $THEAD2$TBODY)"

assert 'join' "$($ASV join <(echo -n $TABLE) <(echo -n $THEAD2$TBODY))" "$(echo "a${FS}b${FS}y${RS}c${FS}d${FS}d${RS}e${FS}f${FS}f${RS}")"

if [[ "${+PLOT}" -eq 1 ]]; then
    "$ASV" plot -s 'set title "noflags"' <(echo -n "x${FS}2x${RS}1${FS}2${RS}2${FS}4${RS}3${FS}6${RS}${FS}8${RS}") <(echo -n "3x${RS}3${RS}6${RS}9${RS}")
    "$ASV" plot -ds 'set title "domain"' <(echo -n "x${FS}y=x${RS}2${FS}2${RS}4${FS}4${RS}6${FS}6${RS}8${FS}8${RS}")
    "$ASV" plot -cs 'set title "categorical"' <(echo -n "x${FS}y=x${RS}one${FS}1${RS}two${FS}2${RS}three${FS}3${RS}")
    "$ASV" plot -dcs 'set title "categorical domain"' <(echo -n "x${FS}category${FS}y=x${RS}2${FS}two${FS}2${RS}4${FS}four${FS}4${RS}6${FS}six${FS}6${RS}")
fi

assert 'project' "$($ASV project 1 < <(echo -n $TABLE))" "$(echo -n "a${RS}c${RS}e${RS}")"
assert 'project names' "$($ASV project a < <(echo -n $TABLE))" "$(echo -n "a${RS}c${RS}e${RS}")"
assert 'project multiple' "$($ASV project b,a < <(echo -n $TABLE))" "$(echo -n "b${FS}a${RS}d${FS}c${RS}f${FS}e${RS}")"
assert 'project inverted' "$($ASV project -v 2 < <(echo -n $TABLE))" "$(echo -n "a${RS}c${RS}e${RS}")"

assert 'rows' "$($ASV rows grep -zi "C" < <(echo -n $TABLE))" "$(echo -n "$THEAD$TROW1")"

assert 'schema' "$($ASV schema <(echo -n $TABLE))" "$(echo "id\tcolumn\n1\ta\n2\tb")"

assert 'select all columns' "$($ASV select "c" <(echo -n $TABLE))" "$(echo -n "$THEAD$TROW1")"
assert 'select ignore case' "$($ASV select -i "C" <(echo -n $TABLE))" "$(echo -n "$THEAD$TROW1")"
assert 'select invert match' "$($ASV select -v "f" <(echo -n $TABLE))" "$(echo -n "$THEAD$TROW1")"
assert 'select field' "$($ASV select -f1 "c" <(echo -n $THEAD${TROW1}d${FS}c$RS))" "$(echo -n "$THEAD$TROW1")"
assert 'select field 2' "$($ASV select -f2 "c" <(echo -n ${THEAD}d${FS}c$RS$TROW1))" "$(echo -n "${THEAD}d${FS}c$RS")"

assert 'sort' "$($ASV sort < <(echo -n $THEAD2$TROW2$TROW1))" "$(echo -n "$THEAD2$TBODY")"

assert 'ungroup' "$($ASV group 1,2 <(echo -n $TABLE) | $ASV ungroup)" "$(echo -n "$TABLE")"

assert 'uniq' "$($ASV uniq < <(echo -n $THEAD$TROW1$TROW1))" "$(echo -n "$THEAD$TROW1")"

assert 'update all columns' "$($ASV update "(a|c|d)" 'x\1x' <(echo -n $TABLE))" "$(echo -n "${THEAD}xcx${FS}xdx${RS}$TROW2")"

assert 'tail' "$($ASV tail 1 <(echo -n $TABLE))" "$(echo -n "${THEAD}e${FS}f${RS}")"

echo 'a b\nc d' > "$TMP"
assert 'tokenize' "$($ASV tokenize $TMP)" "$(echo -n "token${RS}a${RS}b${RS}c${RS}d${RS}")"
assert 'tokenize filenames' "$($ASV tokenize -H $TMP)" "$(echo -n "filename${FS}token${RS}$TMP${FS}a${RS}$TMP${FS}b${RS}$TMP${FS}c${RS}$TMP${FS}d${RS}")"

assert 'tree2asv' "$($ASV tree2asv '/^-/' group item < <(echo "-a\nb\n-c\nd\ne"))" "$(echo -n "group${FS}item${RS}-a${FS}b${RS}-c${FS}d${RS}-c${FS}e${RS}")" 

assert 'tsv2asv' "$($ASV tsv2asv < <(echo "a\tb\nc\td\ne\tf"))" "$(echo -n "$TABLE")"
assert 'tsv2asv rs/fs' "$($ASV tsv2asv -fy -rz < <(echo -n "aybzcydzeyfz"))" "$(echo -n "$TABLE")"
assert 'tsv2asv with headers' "$($ASV tsv2asv < <(echo "c\td\ne\tf") a b)" "$(echo -n "$TABLE")"

assert 'custom RS' "$($ASV -R'\n' size <(echo "a\tb\nc\td\ne\tf"))" '2'
assert 'custom FS' "$($ASV -F$'\t' -R$'\n' cut -f1 <(echo "a\tb\nc\td\ne\tf"))" "$(echo -n "a\nc\ne")"

$ASV asv2files 1 2 < <(echo -n $TABLE)
assert 'asv2files' "$(cat $TMPDIR/c)" "d"
assert 'asv2files' "$(cat $TMPDIR/e)" "f"
rm "$TMPDIR/c" "$TMPDIR/e"

[[ -z "$ERR" ]] && echo "All Tests Pass"
exit "$ERR"


